filter {
	if [type] == "logs" {
		grok {
			match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:[elb][name]} %{IP:[elb][client][ip]}:%{INT:[elb][client][port]:int} (?:%{IP:[elb][backend][ip]}:%{NUMBER:[elb][backend][port]:int}|-) %{NUMBER:[request][processing][time]:float} %{NUMBER:[backend][processing][time]:float} %{NUMBER:[response][processing][time]:float} (?:%{INT:[elb][status][code]:int}|-) (?:%{INT:[backend][status][code]:int}|-) %{INT:[elb][received][bytes]:int} %{INT:[elb][sent][bytes]:int} \"(?:%{GREEDYDATA:[elb][request]}|-)\" \"(?:%{GREEDYDATA:[userAgent]}|-)\" %{NOTSPACE:[elb][sslcipher]} %{NOTSPACE:[elb][sslprotocol]}"]
			match => ["message", "%{GREEDYDATA:[event][name]} for ELB: %{NOTSPACE:[elb][name]} at %{TIMESTAMP_ISO8601:timestamp}"]
			add_field => { "[@metadata][index]" => "aws.elb" }
			add_field => { "[@metadata][status]" => "parsed" }
		}
if [elb_request] =~ /.+/ {
	grok {
		match => ["[elb][request]", "(?:%{WORD:[http][method]}) (?:%{DATA:[http][path]})? (?:%{DATA:[http][type]}/%{NUMBER:[http][version]:float})?|%{GREEDYDATA:[rawreques]t}"]
	}
}
if [http_path] =~ /.+/ {
	grok {
		match => ["[http][path]", "(?:%{WORD:[http][path][protocol]}://)?(%{NOTSPACE:[http][path][site]}:)?(?:%{NUMBER:[http][path][port]:int})?(?:%{GREEDYDATA:[http][path][url]})?"]
	}
}
geoip {
	source => "[elb][client][ip]"
	target => "geoip"
	add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
	add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
}
mutate {
  convert => [ "[geoip][coordinates]", "float"]
}
}
	date {
		match => [ "timestamp", "ISO8601" ]
	}
	mutate { remove_field => [ "message" ] }
	ruby { code => "event.set('[@metadata][index_date]', event.get('@timestamp').time.utc.strftime('%Y-%m'))" }
}
